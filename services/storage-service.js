import AsyncStorage from "@react-native-async-storage/async-storage"

// Chaves para o localStorage
const STORAGE_KEYS = {
  USUARIOS: "fatec360_usuarios",
  QUESTIONARIOS: "fatec360_questionarios",
  RESPOSTAS: "fatec360_respostas",
  FEEDBACKS: "fatec360_feedbacks",
  USUARIO_LOGADO: "fatec360_usuario_logado",
  DATA_VERSION: "fatec360_data_version", // Nova chave para controlar vers√£o
}

// VERS√ÉO DOS DADOS - INCREMENTE ESTE N√öMERO SEMPRE QUE MODIFICAR OS DADOS INICIAIS
const CURRENT_DATA_VERSION = 5

// Dados de exemplo para a apresenta√ß√£o
// const questionariosExemplo = [
//   {
//     id: "exemplo1",
//     titulo: "Avalia√ß√£o dos conte√∫dos do semestre",
//     categoria: "Conte√∫dos",
//     gestorId: 1,
//     dataCriacao: "2023-06-07T10:00:00.000Z",
//     perguntas: [
//       {
//         texto: "Como voc√™ avalia a qualidade dos materiais did√°ticos?",
//         alternativas: ["Excelente", "Bom", "Regular", "Ruim", "P√©ssimo"],
//       },
//       {
//         texto: "Os conte√∫dos abordados s√£o relevantes para sua forma√ß√£o profissional?",
//         alternativas: ["Muito relevantes", "Relevantes", "Neutro", "Pouco relevantes", "Irrelevantes"],
//       },
//       {
//         texto: "A carga hor√°ria das disciplinas √© adequada para o conte√∫do?",
//         alternativas: ["Totalmente adequada", "Adequada", "Neutra", "Pouco adequada", "Inadequada"],
//       },
//     ],
//   },
//   {
//     id: "exemplo2",
//     titulo: "Avalia√ß√£o dos professores",
//     categoria: "Professores",
//     gestorId: 1,
//     dataCriacao: "2023-06-07T11:30:00.000Z",
//     perguntas: [
//       {
//         texto: "Os professores demonstram dom√≠nio do conte√∫do?",
//         alternativas: ["Sempre", "Frequentemente", "√Äs vezes", "Raramente", "Nunca"],
//       },
//       {
//         texto: "Como voc√™ avalia a did√°tica dos professores?",
//         alternativas: ["Excelente", "Boa", "Regular", "Ruim", "P√©ssima"],
//       },
//       {
//         texto: "Os professores s√£o pontuais e cumprem o hor√°rio das aulas?",
//         alternativas: ["Sempre", "Frequentemente", "√Äs vezes", "Raramente", "Nunca"],
//       },
//     ],
//   },
//   {
//     id: "exemplo3",
//     titulo: "Avalia√ß√£o da estrutura f√≠sica",
//     categoria: "Estrutura",
//     gestorId: 2,
//     dataCriacao: "2023-06-07T14:15:00.000Z",
//     perguntas: [
//       {
//         texto: "Como voc√™ avalia as salas de aula?",
//         alternativas: ["Excelentes", "Boas", "Regulares", "Ruins", "P√©ssimas"],
//       },
//       {
//         texto: "Os laborat√≥rios atendem √†s necessidades do curso?",
//         alternativas: ["Totalmente", "Em grande parte", "Parcialmente", "Minimamente", "N√£o atendem"],
//       },
//       {
//         texto: "Como voc√™ avalia a biblioteca?",
//         alternativas: ["Excelente", "Boa", "Regular", "Ruim", "P√©ssima"],
//       },
//     ],
//   },
//   {
//     id: "exemplo4",
//     titulo: "Avalia√ß√£o de oportunidades de est√°gio",
//     categoria: "Est√°gios",
//     gestorId: 2,
//     dataCriacao: "2023-06-07T16:45:00.000Z",
//     perguntas: [
//       {
//         texto: "Como voc√™ avalia as oportunidades de est√°gio divulgadas pela institui√ß√£o?",
//         alternativas: ["Excelentes", "Boas", "Regulares", "Ruins", "P√©ssimas"],
//       },
//       {
//         texto: "A institui√ß√£o oferece suporte adequado para encontrar est√°gios?",
//         alternativas: ["Totalmente adequado", "Adequado", "Neutro", "Pouco adequado", "Inadequado"],
//       },
//       {
//         texto: "Os est√°gios dispon√≠veis s√£o relevantes para sua √°rea de forma√ß√£o?",
//         alternativas: ["Muito relevantes", "Relevantes", "Neutros", "Pouco relevantes", "Irrelevantes"],
//       },
//     ],
//   },
// ]

// Estrutura inicial dos dados - DADOS ATUALIZADOS - MODIFIQUE AQUI E INCREMENTE A VERS√ÉO ACIMA
const INITIAL_DATA = {
  usuarios: {
    gestores: [
      { id: 1, nome: "Gestor Admin", email: "gestor@fatec.sp.gov.br" },
      { id: 2, nome: "Coordenador Silva", email: "coordenador@fatec.sp.gov.br" },
    ],
    alunos: [
      {
        id: 1,
        nome: "Carlos Eduardo Santos",
        email: "carlos@fatec.sp.gov.br",
        curso: "An√°lise e Desenvolvimento de Sistemas",
        periodo: "5¬∫ Semestre",
        ra: "2023000001",
      },
      {
        id: 2,
        nome: "Ana Paula Oliveira",
        email: "ana@fatec.sp.gov.br",
        curso: "An√°lise e Desenvolvimento de Sistemas",
        periodo: "3¬∫ Semestre",
        ra: "2023000002",
      },
      {
        id: 3,
        nome: "Pedro Vitor Rodrigues Coelho",
        email: "pedro@fatec.sp.gov.br",
        curso: "An√°lise e Desenvolvimento de Sistemas",
        periodo: "5¬∫ Semestre",
        ra: "2023000003",
      },
      {
        id: 4,
        nome: "Mariana Silva Rodrigues",
        email: "mariana@fatec.sp.gov.br",
        curso: "An√°lise e Desenvolvimento de Sistemas",
        periodo: "7¬∫ Semestre",
        ra: "2023000004",
      },
    ],
  },
  questionarios: {},
  respostas: [],
  feedbacks: [],
}

class StorageService {
  // ========== INICIALIZA√á√ÉO COM CONTROLE DE VERS√ÉO MELHORADO ==========
  async inicializarDados() {
    try {
      console.log("üîÑ === INICIALIZANDO DADOS COM CONTROLE DE VERS√ÉO MELHORADO ===")

      // Verificar vers√£o atual dos dados
      const versaoAtual = await AsyncStorage.getItem(STORAGE_KEYS.DATA_VERSION)
      const versaoSalva = versaoAtual ? Number.parseInt(versaoAtual) : 0

      console.log(`üìä Vers√£o dos dados salva: ${versaoSalva}`)
      console.log(`üìä Vers√£o atual do c√≥digo: ${CURRENT_DATA_VERSION}`)

      // SEMPRE for√ßar atualiza√ß√£o se a vers√£o mudou
      if (versaoSalva < CURRENT_DATA_VERSION) {
        console.log("üîÑ Vers√£o desatualizada! For√ßando atualiza√ß√£o dos dados...")
        await this.forcarAtualizacaoCompleta()
      } else {
        console.log("‚úÖ Dados j√° est√£o na vers√£o mais recente")
        // Mesmo assim, verificar se os dados existem
        await this.verificarEGarantirDados()
      }
    } catch (error) {
      console.error("‚ùå Erro ao inicializar dados:", error)
      // Em caso de erro, for√ßar atualiza√ß√£o
      await this.forcarAtualizacaoCompleta()
    }
  }

  // ========== VERIFICAR E GARANTIR QUE OS DADOS EXISTEM ==========
  async verificarEGarantirDados() {
    try {
      console.log("üîç === VERIFICANDO SE OS DADOS EXISTEM ===")

      const usuarios = await AsyncStorage.getItem(STORAGE_KEYS.USUARIOS)
      const questionarios = await AsyncStorage.getItem(STORAGE_KEYS.QUESTIONARIOS)

      if (!usuarios || !questionarios) {
        console.log("‚ö†Ô∏è Dados faltando, for√ßando atualiza√ß√£o...")
        await this.forcarAtualizacaoCompleta()
      } else {
        console.log("‚úÖ Todos os dados necess√°rios existem")
      }
    } catch (error) {
      console.error("‚ùå Erro ao verificar dados:", error)
      await this.forcarAtualizacaoCompleta()
    }
  }

  // ========== FUN√á√ÉO PARA FOR√áAR ATUALIZA√á√ÉO COMPLETA ==========
  async forcarAtualizacaoCompleta() {
    try {
      console.log("üîÑ === FOR√áANDO ATUALIZA√á√ÉO COMPLETA DOS DADOS ===")

      // Preservar dados importantes antes de atualizar
      const usuarioLogado = await AsyncStorage.getItem(STORAGE_KEYS.USUARIO_LOGADO)
      const respostasExistentes = await AsyncStorage.getItem(STORAGE_KEYS.RESPOSTAS)
      const feedbacksExistentes = await AsyncStorage.getItem("feedbacks_enviados")

      console.log("üíæ Dados preservados:")
      console.log("üë§ Usu√°rio logado:", usuarioLogado ? "‚úÖ" : "‚ùå")
      console.log("üìä Respostas:", respostasExistentes ? "‚úÖ" : "‚ùå")
      console.log("üí¨ Feedbacks:", feedbacksExistentes ? "‚úÖ" : "‚ùå")

      // SEMPRE atualizar dados de usu√°rios com os novos valores
      console.log("üîÑ Atualizando dados de usu√°rios...")
      await AsyncStorage.setItem(STORAGE_KEYS.USUARIOS, JSON.stringify(INITIAL_DATA.usuarios))
      console.log("‚úÖ Usu√°rios atualizados com novos dados")

      // Atualizar question√°rios se necess√°rio
      const questionariosExistentes = await AsyncStorage.getItem(STORAGE_KEYS.QUESTIONARIOS)
      if (!questionariosExistentes) {
        const questionariosIniciais = {
          1: questionariosExemplo.filter((q) => q.gestorId === 1),
          2: questionariosExemplo.filter((q) => q.gestorId === 2),
        }
        await AsyncStorage.setItem(STORAGE_KEYS.QUESTIONARIOS, JSON.stringify(questionariosIniciais))
        console.log("‚úÖ Question√°rios inicializados")
      } else {
        console.log("‚úÖ Question√°rios j√° existem, mantendo")
      }

      // Inicializar respostas se n√£o existirem
      if (!respostasExistentes) {
        await AsyncStorage.setItem(STORAGE_KEYS.RESPOSTAS, JSON.stringify(INITIAL_DATA.respostas))
        console.log("‚úÖ Respostas inicializadas")
      } else {
        console.log("‚úÖ Respostas preservadas")
      }

      // Inicializar feedbacks se n√£o existirem
      if (!feedbacksExistentes) {
        await AsyncStorage.setItem(STORAGE_KEYS.FEEDBACKS, JSON.stringify(INITIAL_DATA.feedbacks))
        console.log("‚úÖ Feedbacks inicializados")
      } else {
        console.log("‚úÖ Feedbacks preservados")
      }

      // Restaurar usu√°rio logado se existia
      if (usuarioLogado) {
        await AsyncStorage.setItem(STORAGE_KEYS.USUARIO_LOGADO, usuarioLogado)
        console.log("‚úÖ Usu√°rio logado restaurado")
      }

      // Atualizar vers√£o dos dados
      await AsyncStorage.setItem(STORAGE_KEYS.DATA_VERSION, CURRENT_DATA_VERSION.toString())
      console.log(`‚úÖ Vers√£o atualizada para: ${CURRENT_DATA_VERSION}`)

      console.log("üéâ === ATUALIZA√á√ÉO COMPLETA FINALIZADA ===")
      return true
    } catch (error) {
      console.error("‚ùå Erro ao for√ßar atualiza√ß√£o:", error)
      return false
    }
  }

  // ========== FUN√á√ÉO PARA LIMPAR E RECRIAR TUDO ==========
  async limparERecriarDados() {
    try {
      console.log("üóëÔ∏è === LIMPANDO E RECRIANDO TODOS OS DADOS ===")

      // Limpar tudo
      await AsyncStorage.multiRemove(Object.values(STORAGE_KEYS))
      await AsyncStorage.removeItem("feedbacks_enviados")

      // Recriar dados do zero
      await AsyncStorage.setItem(STORAGE_KEYS.USUARIOS, JSON.stringify(INITIAL_DATA.usuarios))

      const questionariosIniciais = {
        1: questionariosExemplo.filter((q) => q.gestorId === 1),
        2: questionariosExemplo.filter((q) => q.gestorId === 2),
      }
      await AsyncStorage.setItem(STORAGE_KEYS.QUESTIONARIOS, JSON.stringify(questionariosIniciais))
      await AsyncStorage.setItem(STORAGE_KEYS.RESPOSTAS, JSON.stringify(INITIAL_DATA.respostas))
      await AsyncStorage.setItem(STORAGE_KEYS.FEEDBACKS, JSON.stringify(INITIAL_DATA.feedbacks))
      await AsyncStorage.setItem(STORAGE_KEYS.DATA_VERSION, CURRENT_DATA_VERSION.toString())

      console.log("‚úÖ Todos os dados foram limpos e recriados!")
      return true
    } catch (error) {
      console.error("‚ùå Erro ao limpar e recriar dados:", error)
      return false
    }
  }

  // ========== USU√ÅRIOS ==========
async fazerLogin(email, tipoUsuario) {
  try {
    console.log(`üîê Tentando login com email: ${email}, tipo: ${tipoUsuario}`)

    const usuarios = await this.getUsuarios()
    const listaUsuarios = tipoUsuario === "gestor" ? usuarios.gestores : usuarios.alunos

    // Encontrar o usu√°rio pelo email (case insensitive)
    const usuario = listaUsuarios.find((u) => u.email.toLowerCase() === email.toLowerCase())

    if (usuario) {
      console.log(`‚úÖ Usu√°rio encontrado:`, JSON.stringify(usuario))
      const usuarioLogado = { ...usuario, tipo: tipoUsuario }

      // Limpar qualquer usu√°rio anterior
      await AsyncStorage.removeItem(STORAGE_KEYS.USUARIO_LOGADO)

      // Salvar o novo usu√°rio
      await AsyncStorage.setItem(STORAGE_KEYS.USUARIO_LOGADO, JSON.stringify(usuarioLogado))

      // Verificar se foi salvo corretamente
      const verificacao = await AsyncStorage.getItem(STORAGE_KEYS.USUARIO_LOGADO)
      console.log(`üîç Verifica√ß√£o do usu√°rio salvo:`, verificacao)

      return { sucesso: true, usuario: usuarioLogado }
    }

    console.log(`‚ùå Usu√°rio n√£o encontrado para o email: ${email}`)
    return { sucesso: false, erro: "Email n√£o encontrado" }
  } catch (error) {
    console.error(`‚ùå Erro ao fazer login:`, error)
    return { sucesso: false, erro: "Erro ao fazer login" }
  }
}


  async getUsuarioLogado() {
    try {
      const usuario = await AsyncStorage.getItem(STORAGE_KEYS.USUARIO_LOGADO)
      return usuario ? JSON.parse(usuario) : null
    } catch (error) {
      return null
    }
  }

  async logout() {
    try {
      await AsyncStorage.removeItem(STORAGE_KEYS.USUARIO_LOGADO)
      return true
    } catch (error) {
      return false
    }
  }

  async getUsuarios() {
    try {
      console.log("üë• === BUSCANDO USU√ÅRIOS ===")
      const usuarios = await AsyncStorage.getItem(STORAGE_KEYS.USUARIOS)

      if (!usuarios) {
        console.log("‚ö†Ô∏è Nenhum usu√°rio encontrado, retornando dados iniciais")
        return INITIAL_DATA.usuarios
      }

      const dadosUsuarios = JSON.parse(usuarios)
      console.log("üë• Dados de usu√°rios carregados:", JSON.stringify(dadosUsuarios, null, 2))

      // Verificar se os dados t√™m a estrutura correta
      if (!dadosUsuarios.alunos || !Array.isArray(dadosUsuarios.alunos)) {
        console.log("‚ö†Ô∏è Estrutura de dados inv√°lida, retornando dados iniciais")
        return INITIAL_DATA.usuarios
      }

      return dadosUsuarios
    } catch (error) {
      console.error("‚ùå Erro ao buscar usu√°rios:", error)
      return INITIAL_DATA.usuarios
    }
  }

  // ========== M√âTODOS PARA COMPATIBILIDADE ==========
  getAlunos() {
    return this.getUsuarios().then((usuarios) => usuarios.alunos)
  }

  async getAlunoById(id) {
    const usuarios = await this.getUsuarios()
    const aluno = usuarios.alunos.find((aluno) => aluno.id === id)
    console.log(`üîç Buscando aluno ID ${id}:`, aluno)
    return aluno
  }

  async addAluno(aluno) {
    const usuarios = await this.getUsuarios()
    aluno.id = this.getNextId(usuarios.alunos)
    usuarios.alunos.push(aluno)
    await AsyncStorage.setItem(STORAGE_KEYS.USUARIOS, JSON.stringify(usuarios))
    return aluno
  }

  async updateAluno(id, updatedAluno) {
    const usuarios = await this.getUsuarios()
    const index = usuarios.alunos.findIndex((aluno) => aluno.id === id)
    if (index !== -1) {
      usuarios.alunos[index] = { ...usuarios.alunos[index], ...updatedAluno }
      await AsyncStorage.setItem(STORAGE_KEYS.USUARIOS, JSON.stringify(usuarios))
      return usuarios.alunos[index]
    }
    return null
  }

  async deleteAluno(id) {
    const usuarios = await this.getUsuarios()
    usuarios.alunos = usuarios.alunos.filter((aluno) => aluno.id !== id)
    await AsyncStorage.setItem(STORAGE_KEYS.USUARIOS, JSON.stringify(usuarios))
  }

  getNextId(lista) {
    if (lista.length === 0) {
      return 1
    }
    const ids = lista.map((item) => item.id)
    return Math.max(...ids) + 1
  }

  // ========== QUESTION√ÅRIOS ==========
  async salvarQuestionario(questionario) {
    try {
      const usuarioLogado = await this.getUsuarioLogado()
      if (!usuarioLogado || usuarioLogado.tipo !== "gestor") {
        return { sucesso: false, erro: "Apenas gestores podem criar question√°rios" }
      }

      const questionarios = await this.getQuestionarios()
      const gestorId = usuarioLogado.id

      if (!questionarios[gestorId]) {
        questionarios[gestorId] = []
      }

      const novoQuestionario = {
        ...questionario,
        id: Date.now(),
        gestorId: gestorId,
        dataCriacao: new Date().toISOString(),
      }

      questionarios[gestorId].push(novoQuestionario)
      await AsyncStorage.setItem(STORAGE_KEYS.QUESTIONARIOS, JSON.stringify(questionarios))

      return { sucesso: true, questionario: novoQuestionario }
    } catch (error) {
      return { sucesso: false, erro: "Erro ao salvar question√°rio" }
    }
  }

  async atualizarQuestionario(questionarioId, dadosAtualizados) {
    try {
      const usuarioLogado = await this.getUsuarioLogado()
      if (!usuarioLogado || usuarioLogado.tipo !== "gestor") {
        return { sucesso: false, erro: "Apenas gestores podem editar question√°rios" }
      }

      const questionarios = await this.getQuestionarios()
      const gestorId = usuarioLogado.id

      if (!questionarios[gestorId]) {
        return { sucesso: false, erro: "Question√°rio n√£o encontrado" }
      }

      const index = questionarios[gestorId].findIndex((q) => q.id === questionarioId)
      if (index === -1) {
        return { sucesso: false, erro: "Question√°rio n√£o encontrado" }
      }

      // Manter dados originais importantes
      const questionarioOriginal = questionarios[gestorId][index]
      const questionarioAtualizado = {
        ...dadosAtualizados,
        id: questionarioOriginal.id,
        gestorId: questionarioOriginal.gestorId,
        dataCriacao: questionarioOriginal.dataCriacao,
        dataAtualizacao: new Date().toISOString(),
      }

      questionarios[gestorId][index] = questionarioAtualizado
      await AsyncStorage.setItem(STORAGE_KEYS.QUESTIONARIOS, JSON.stringify(questionarios))

      return { sucesso: true, questionario: questionarioAtualizado }
    } catch (error) {
      return { sucesso: false, erro: "Erro ao atualizar question√°rio" }
    }
  }

  async excluirQuestionario(questionarioId) {
    try {
      const usuarioLogado = await this.getUsuarioLogado()
      if (!usuarioLogado || usuarioLogado.tipo !== "gestor") {
        return { sucesso: false, erro: "Apenas gestores podem excluir question√°rios" }
      }

      const questionarios = await this.getQuestionarios()
      const gestorId = usuarioLogado.id

      if (!questionarios[gestorId]) {
        return { sucesso: false, erro: "Question√°rio n√£o encontrado" }
      }

      const index = questionarios[gestorId].findIndex((q) => q.id === questionarioId)
      if (index === -1) {
        return { sucesso: false, erro: "Question√°rio n√£o encontrado" }
      }

      // Remover o question√°rio da lista
      questionarios[gestorId].splice(index, 1)
      await AsyncStorage.setItem(STORAGE_KEYS.QUESTIONARIOS, JSON.stringify(questionarios))

      return { sucesso: true }
    } catch (error) {
      return { sucesso: false, erro: "Erro ao excluir question√°rio" }
    }
  }

  async getQuestionarios() {
    try {
      const questionarios = await AsyncStorage.getItem(STORAGE_KEYS.QUESTIONARIOS)
      return questionarios ? JSON.parse(questionarios) : {}
    } catch (error) {
      return {}
    }
  }

  async getMeusQuestionarios() {
    try {
      const usuarioLogado = await this.getUsuarioLogado()
      if (!usuarioLogado) return []

      const questionarios = await this.getQuestionarios()
      return questionarios[usuarioLogado.id] || []
    } catch (error) {
      return []
    }
  }

  async getTodosQuestionarios() {
    try {
      const questionarios = await this.getQuestionarios()
      const todosQuestionarios = []

      // Verificar se h√° question√°rios no AsyncStorage
      const temQuestionariosNoStorage = Object.values(questionarios).some(
        (array) => Array.isArray(array) && array.length > 0,
      )

      // Se n√£o houver question√°rios no storage, retornar os exemplos
      if (!temQuestionariosNoStorage) {
        console.log("üìù Usando question√°rios de exemplo")
        return questionariosExemplo
      }

      // Caso contr√°rio, retornar os question√°rios do storage
      Object.values(questionarios).forEach((gestorQuestionarios) => {
        if (Array.isArray(gestorQuestionarios)) {
          todosQuestionarios.push(...gestorQuestionarios)
        }
      })

      return todosQuestionarios
    } catch (error) {
      console.error("‚ùå Erro ao buscar todos os question√°rios:", error)
      // Em caso de erro, retornar os exemplos
      return questionariosExemplo
    }
  }

  // ========== RESPOSTAS (COM LOGS DETALHADOS) ==========
  async salvarResposta(resposta) {
    try {
      console.log("üöÄ === INICIANDO SALVAMENTO DE RESPOSTA ===")
      console.log("üìù Dados da resposta recebida:", JSON.stringify(resposta, null, 2))

      const usuarioLogado = await this.getUsuarioLogado()
      if (!usuarioLogado) {
        console.log("‚ùå Usu√°rio n√£o logado")
        return { sucesso: false, erro: "Usu√°rio n√£o logado" }
      }

      console.log("üë§ Usu√°rio logado:", JSON.stringify(usuarioLogado, null, 2))

      // Buscar respostas existentes
      const respostasExistentes = await this.getTodasRespostas()
      console.log("üìä Respostas existentes antes de salvar:", respostasExistentes.length)

      const novaResposta = {
        id: Date.now().toString(),
        questionarioId: resposta.questionarioId,
        questionarioTitulo: resposta.questionarioTitulo,
        categoria: resposta.categoria,
        usuarioId: usuarioLogado.id,
        nomeUsuario: usuarioLogado.nome,
        tipoUsuario: usuarioLogado.tipo,
        dataEnvio: new Date().toISOString(),
        respostas: resposta.respostas,
      }

      console.log("üìù Nova resposta criada:", JSON.stringify(novaResposta, null, 2))

      // Adicionar √† lista
      const todasRespostas = [...respostasExistentes, novaResposta]
      console.log("üìä Total de respostas ap√≥s adicionar:", todasRespostas.length)

      // Salvar no AsyncStorage
      await AsyncStorage.setItem(STORAGE_KEYS.RESPOSTAS, JSON.stringify(todasRespostas))
      console.log("üíæ Dados salvos no AsyncStorage com sucesso!")

      // Verificar se foi salvo corretamente
      const verificacao = await AsyncStorage.getItem(STORAGE_KEYS.RESPOSTAS)
      const dadosVerificacao = JSON.parse(verificacao)
      console.log("‚úÖ Verifica√ß√£o - Total de respostas salvas:", dadosVerificacao.length)

      console.log("üéâ === SALVAMENTO CONCLU√çDO COM SUCESSO ===")

      return { sucesso: true, resposta: novaResposta }
    } catch (error) {
      console.error("‚ùå === ERRO NO SALVAMENTO ===")
      console.error("‚ùå Erro detalhado:", error)
      return { sucesso: false, erro: "Erro ao salvar resposta" }
    }
  }

  async getTodasRespostas() {
    try {
      console.log("üîç === BUSCANDO TODAS AS RESPOSTAS ===")

      const respostasString = await AsyncStorage.getItem(STORAGE_KEYS.RESPOSTAS)
      console.log("üìä Dados brutos do AsyncStorage:", respostasString)

      let respostasArray = []

      if (respostasString) {
        const dadosParsed = JSON.parse(respostasString)
        console.log("üìä Dados ap√≥s parse:", typeof dadosParsed, Array.isArray(dadosParsed))

        // Verificar se √© um array ou objeto (dados antigos)
        if (Array.isArray(dadosParsed)) {
          respostasArray = dadosParsed
          console.log("‚úÖ Dados j√° est√£o no formato array")
        } else if (typeof dadosParsed === "object" && dadosParsed !== null) {
          // Converter objeto antigo para array
          console.log("üîÑ Convertendo dados antigos de objeto para array...")
          respostasArray = []
          Object.values(dadosParsed).forEach((questionarioRespostas) => {
            if (Array.isArray(questionarioRespostas)) {
              respostasArray.push(...questionarioRespostas)
            }
          })
          // Salvar no novo formato
          await AsyncStorage.setItem(STORAGE_KEYS.RESPOSTAS, JSON.stringify(respostasArray))
          console.log("‚úÖ Dados convertidos e salvos no novo formato")
        }
      } else {
        console.log("üìä Nenhum dado encontrado no AsyncStorage")
      }

      console.log("üìä Total de respostas encontradas:", respostasArray.length)
      console.log("üìä Respostas:", JSON.stringify(respostasArray, null, 2))

      // Garantir que √© um array e ordenar por data
      if (Array.isArray(respostasArray)) {
        const respostasOrdenadas = respostasArray.sort((a, b) => new Date(b.dataEnvio) - new Date(a.dataEnvio))
        console.log("‚úÖ === BUSCA CONCLU√çDA ===")
        return respostasOrdenadas
      } else {
        console.log("‚ö†Ô∏è Dados n√£o s√£o um array, retornando array vazio")
        return []
      }
    } catch (error) {
      console.error("‚ùå === ERRO NA BUSCA ===")
      console.error("‚ùå Erro detalhado:", error)
      return []
    }
  }

  async getRespostasPorCategoria(categoria) {
    try {
      const todasRespostas = await this.getTodasRespostas()
      return todasRespostas.filter((resposta) => resposta.categoria === categoria)
    } catch (error) {
      console.error(`‚ùå Erro ao buscar respostas da categoria ${categoria}:`, error)
      return []
    }
  }

  // ========== FEEDBACKS ==========
  async salvarFeedback(feedback) {
    try {
      const usuarioLogado = await this.getUsuarioLogado()
      if (!usuarioLogado) {
        return { sucesso: false, erro: "Usu√°rio n√£o logado" }
      }

      const feedbacks = await this.getFeedbacks()

      const novoFeedback = {
        ...feedback,
        id: Date.now(),
        usuarioId: usuarioLogado.id,
        nomeUsuario: usuarioLogado.nome,
        tipoUsuario: usuarioLogado.tipo,
        dataEnvio: new Date().toISOString(),
      }

      feedbacks.push(novoFeedback)
      await AsyncStorage.setItem(STORAGE_KEYS.FEEDBACKS, JSON.stringify(feedbacks))

      return { sucesso: true, feedback: novoFeedback }
    } catch (error) {
      return { sucesso: false, erro: "Erro ao salvar feedback" }
    }
  }

  async getFeedbacks() {
    try {
      const feedbacks = await AsyncStorage.getItem(STORAGE_KEYS.FEEDBACKS)
      return feedbacks ? JSON.parse(feedbacks) : []
    } catch (error) {
      return []
    }
  }

  // ========== UTILIT√ÅRIOS ==========
  async limparTodosDados() {
    try {
      await AsyncStorage.multiRemove(Object.values(STORAGE_KEYS))
      await AsyncStorage.removeItem("feedbacks_enviados")
      console.log("üóëÔ∏è Todos os dados foram limpos!")
      return true
    } catch (error) {
      console.error("‚ùå Erro ao limpar dados:", error)
      return false
    }
  }

  // ========== DEBUG ==========
  async debugAsyncStorage() {
    try {
      console.log("üîç === DEBUG ASYNC STORAGE ===")

      const versao = await AsyncStorage.getItem(STORAGE_KEYS.DATA_VERSION)
      console.log("üìä Vers√£o dos dados:", versao || "N√£o definida")

      const usuarios = await AsyncStorage.getItem(STORAGE_KEYS.USUARIOS)
      console.log("üë• Usu√°rios:", usuarios ? "‚úÖ Existe" : "‚ùå N√£o existe")
      if (usuarios) {
        const dadosUsuarios = JSON.parse(usuarios)
        console.log("üë• Conte√∫do dos usu√°rios:", JSON.stringify(dadosUsuarios, null, 2))
      }

      const questionarios = await AsyncStorage.getItem(STORAGE_KEYS.QUESTIONARIOS)
      console.log("üìù Question√°rios:", questionarios ? "‚úÖ Existe" : "‚ùå N√£o existe")

      const respostas = await AsyncStorage.getItem(STORAGE_KEYS.RESPOSTAS)
      console.log("üìä Respostas:", respostas ? "‚úÖ Existe" : "‚ùå N√£o existe")

      const usuarioLogado = await AsyncStorage.getItem(STORAGE_KEYS.USUARIO_LOGADO)
      console.log("üë§ Usu√°rio logado:", usuarioLogado ? "‚úÖ Existe" : "‚ùå N√£o existe")

      console.log("üîç === FIM DEBUG ===")
    } catch (error) {
      console.error("‚ùå Erro no debug:", error)
    }
  }
}

// EXPORTA√á√ÉO CORRETA
export default new StorageService()
